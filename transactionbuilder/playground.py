import eth_abi

from util.update_db import updateDB

update_db = updateDB('gnosisChain','0xb6cedb9603e7992a5d42ea2246b3ba0a21342503')
abis = update_db.update_abi_db()
gas_limits = update_db.update_gaslimit_db()
print(abis)
print(gas_limits)

# def decode_string_or_bytes32(data: bytes) -> str:
#     try:
#         return eth_abi.decode_abi(["string"], data)[0]
#     except OverflowError:
#         name = eth_abi.decode_abi(["bytes32"], data)[0]
#         end_position = name.find(b"\x00")
#         if end_position == -1:
#             return name.decode()
#         else:
#             return name[:end_position].decode()

# inputs = '0x6928e74b0000000000000000000000004ecaba5870353805a9f068101a40e0f32ed605c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
# inputs2 = '0x6928e74b0000000000000000000000004ecaba5870353805a9f068101a40e0f32ed605c6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
# print(len(inputs), len(inputs2))
# data = inputs[138:202]
# inputs = inputs[10:]
# print(data)
# starts = int('0x'+data,16)*2
# print(starts)
# datalength = inputs[starts:starts+64]
# print(datalength)
# length = int('0x'+datalength,16)*2
# print(length)
# startsdata = inputs[starts+64:starts+64+length]
# print(startsdata)
